// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package podinfos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodInfoClient is the client API for PodInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodInfoClient interface {
	GetPodInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PodInfoOutput, error)
}

type podInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPodInfoClient(cc grpc.ClientConnInterface) PodInfoClient {
	return &podInfoClient{cc}
}

func (c *podInfoClient) GetPodInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PodInfoOutput, error) {
	out := new(PodInfoOutput)
	err := c.cc.Invoke(ctx, "/PodInfo/GetPodInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodInfoServer is the server API for PodInfo service.
// All implementations must embed UnimplementedPodInfoServer
// for forward compatibility
type PodInfoServer interface {
	GetPodInfo(context.Context, *EmptyMessage) (*PodInfoOutput, error)
	mustEmbedUnimplementedPodInfoServer()
}

// UnimplementedPodInfoServer must be embedded to have forward compatible implementations.
type UnimplementedPodInfoServer struct {
}

func (UnimplementedPodInfoServer) GetPodInfo(context.Context, *EmptyMessage) (*PodInfoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodInfo not implemented")
}
func (UnimplementedPodInfoServer) mustEmbedUnimplementedPodInfoServer() {}

// UnsafePodInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodInfoServer will
// result in compilation errors.
type UnsafePodInfoServer interface {
	mustEmbedUnimplementedPodInfoServer()
}

func RegisterPodInfoServer(s grpc.ServiceRegistrar, srv PodInfoServer) {
	s.RegisterService(&PodInfo_ServiceDesc, srv)
}

func _PodInfo_GetPodInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodInfoServer).GetPodInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PodInfo/GetPodInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodInfoServer).GetPodInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PodInfo_ServiceDesc is the grpc.ServiceDesc for PodInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PodInfo",
	HandlerType: (*PodInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodInfo",
			Handler:    _PodInfo_GetPodInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/podinfo.proto",
}
